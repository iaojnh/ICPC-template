const int N=50005;
int size[N],deep[N],top[N],father[N],son[N],tid[N],ran[N];
__int64 data[N];
vector<int> V[N];
int total=0;
void dfs1(int u,int fa,int dep)
{
    deep[u]=dep;
    father[u]=fa;
    size[u]=1;
    for(int i=0;i<V[u].size();i++)
    {
        int v=V[u][i];
        if(fa==v)continue;
        dfs1(v,u,dep+1);
        size[u]+=size[v];
        if(son[u]==-1||size[son[u]]<size[v])son[u]=v;
    }
}
void dfs2(int u,int tp)
{ 
    top[u]=tp;
    tid[u]=++total;
    ran[tid[u]]=u;
    if(son[u]==-1)return;
    dfs2(son[u],tp);
    for(int i=0;i<V[u].size();i++)
    {
        int v=V[u][i];
        if(v!=son[u]&&v!=father[u])dfs2(v,v);
    }
}
//------
__int64 tree[N<<2],lazy[N<<2];
void buildtree(int l,int r,int node)
{
    if(l==r)tree[node]=data[ran[l]];
    else
    {
        int mid=(l+r)>>1;
        buildtree(l,mid,node<<1);
        buildtree(mid+1,r,node<<1|1);
        tree[node]=tree[node<<1]+tree[node<<1|1];
    }
}
void pushdown(int l,int r,int node)
{
    if(lazy[node])
    {
        lazy[node<<1]+=lazy[node];
        lazy[node<<1|1]+=lazy[node];
        int mid=(l+r)>>1;
        tree[node<<1]+=lazy[node]*(mid-l+1);
        tree[node<<1|1]+=lazy[node]*(r-mid);
        lazy[node]=0;
    }
}   
void update(int l,int r,int node,int ll,int rr,__int64 num)
{
    if(ll>rr)swap(ll,rr);
    if(ll==l&&rr==r)
    {
        lazy[node]+=num;
        tree[node]+=num*(rr-ll+1);
        return;
    }
    else if(l==r)return;
    int mid=(l+r)>>1;
    pushdown(l,r,node);
    if(rr<=mid)update(l,mid,node<<1,ll,rr,num);
    else if(ll>mid)update(mid+1,r,node<<1|1,ll,rr,num);
    else
    {
        update(l,mid,node<<1,ll,mid,num);
        update(mid+1,r,node<<1|1,mid+1,rr,num);
    }
    tree[node]=tree[node<<1]+tree[node<<1|1];
}
__int64 query(int l,int r,int node,int q)
{
    if(l==r)return tree[node];
    else
    {
        pushdown(l,r,node);
        int mid=(l+r)>>1;
        if(q<=mid)return query(l,mid,node<<1,q);
        else return query(mid+1,r,node<<1|1,q);
    }
}
void change(int x,int y,int val,int n)
{
    while(top[x]!=top[y])
    {
        if(deep[top[x]]<deep[top[y]])swap(x,y);
        update(1,n,1,tid[top[x]],tid[x],val);
        x=father[top[x]]; 
    } 
    if(deep[x]>deep[y])swap(x,y);
    update(1,n,1,tid[x],tid[y],val);
}
//--------
void init(int n)
{
    memset(deep,0,sizeof(deep));
    memset(size,0,sizeof(size));
    memset(top,0,sizeof(top));
    memset(father,0,sizeof(father));
    memset(son,-1,sizeof(son));
    memset(tid,0,sizeof(tid));
    memset(ran,0,sizeof(ran));
    for(int i=1;i<=n;i++)V[i].clear();
    memset(tree,0,sizeof(tree));
    memset(lazy,0,sizeof(lazy));
    total=0;
}
