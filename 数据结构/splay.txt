#define key tree[tree[root].ch[1]].ch[0]
struct node
{
    int data,ch[2],fa,size;//±ÿ–ÎœÓ
    int add,rev;//lazyœÓ
    bitset<256> B;
}tree[100005];
int data[100005];
int root;
//--------data--------
void update(int x)
{
    tree[x].size=1+tree[tree[x].ch[0]].size+tree[tree[x].ch[1]].size;
    tree[x].B=tree[tree[x].ch[0]].B|tree[tree[x].ch[1]].B;
    tree[x].B[tree[x].data]=1;
}
int buildtree(int l,int r,int fa)
{
    if(l>r)return 0;
    int x=(l+r)>>1;
    tree[x].data=data[x];
    tree[x].fa=fa;
    tree[x].add=tree[x].rev=0;
    tree[x].ch[0]=buildtree(l,x-1,x);
    tree[x].ch[1]=buildtree(x+1,r,x);
    update(x);
    return x;
}
void add(int x,int val)
{
    if(!x)return;
    tree[x].data=(tree[x].data+val)%256;
    tree[x].add=(tree[x].add+val)%256;
    tree[x].B=(tree[x].B<<val)|(tree[x].B>>(256-val));
}
void rev(int x)
{
    swap(tree[x].ch[0],tree[x].ch[1]);
    tree[x].rev^=1;
}
void pushdown(int x)
{
    if(tree[x].add)
    {
        add(tree[x].ch[0],tree[x].add);
        add(tree[x].ch[1],tree[x].add);
        tree[x].add=0;
    }
    if(tree[x].rev)
    {
        rev(tree[x].ch[0]);
        rev(tree[x].ch[1]);
        tree[x].rev=0;
    }
}
void rot(int x)
{
    int y=tree[x].fa;
    pushdown(y);
    pushdown(x);
    if (root==y)root=x;
    int f=tree[y].ch[0]==x;
    tree[y].ch[!f]=tree[x].ch[f];
    if (tree[x].ch[f]) tree[tree[x].ch[f]].fa=y;
    tree[x].fa=tree[y].fa;
    if(tree[y].fa) tree[tree[y].fa].ch[tree[tree[y].fa].ch[1]==y]=x;
    tree[x].ch[f]=y;
    tree[y].fa=x;
    update(y);
}
void splay(int x,int g)
{
    if(tree[x].fa==g)pushdown(x);
    else
    {
        while(tree[x].fa!=g)rot(x);
        update(x);
    }
}
void rto(int k,int g)
{
    int x=root;
    while(1)
    {
        pushdown(x);
        if(tree[tree[x].ch[0]].size+1==k)break;
        if(k<=tree[tree[x].ch[0]].size)x=tree[x].ch[0];
        else
        {
            k-=tree[tree[x].ch[0]].size+1;
            x=tree[x].ch[1];
        }
    }
    splay(x,g);
}
//--------function--------
int main()
{
    int T;
    scanf("%d",&T);
    while(T--)
    {
        int n,m,q;
        scanf("%d%d%d",&n,&m,&q);
        rep(i,2,n*m+2)scanf("%d",&data[i]);
        root=buildtree(1,n*m+2,0);
        while(q--)
        {
            int co;
            scanf("%d",&co);
            switch(co)
            {
                case 1:
                {
                    int a,b;
                    scanf("%d%d",&a,&b);
                    int qu=(a-1)*m+b+1;
                    rto(qu-1,0);
                    rto(qu+1,root);
                    printf("%d\n",tree[key].data);
                    break;
                }
                case 2:
                {
                    int a,b,c;
                    scanf("%d%d%d",&a,&b,&c);
                    int l=(a-1)*m+b+1;
                    int r=(a-1)*m+c+1;
                    rto(l-1,0);
                    rto(r+1,root);
                    printf("%u\n",tree[key].B.count());
                    break;
                }
                case 3:
                {
                    int a,b,c,val;
                    scanf("%d%d%d%d",&a,&b,&c,&val);
                    val%=256;
                    int l=(a-1)*m+b+1;
                    int r=(a-1)*m+c+1;
                    rto(l-1,0);
                    rto(r+1,root);
                    add(key,val);
                    break;
                }
                case 4:
                {
                    int a,b,c;
                    scanf("%d%d%d",&a,&b,&c);
                    int l=(a-1)*m+b+1;
                    int r=(a-1)*m+c+1;
                    rto(l-1,0);
                    rto(r+1,root);
                    rev(key);
                    break;
                }
            }
        }
    }
    return 0;
}